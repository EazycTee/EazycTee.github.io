import{_ as a,c as t,a as l,e as s,o as n,r as o}from"./app.38d14d4e.js";const b=JSON.parse('{"title":"Laravel Development on Docker","description":"","frontmatter":{"title":"Laravel Development on Docker","date":"2023-02-27T00:00:00.000Z","author":"Eazyc","tags":["programming"]},"headers":[{"level":2,"title":"Setting Up Docker","slug":"setting-up-docker","link":"#setting-up-docker","children":[]},{"level":2,"title":"Start Up A Docker-Compose","slug":"start-up-a-docker-compose","link":"#start-up-a-docker-compose","children":[]},{"level":2,"title":"Xdebug","slug":"xdebug","link":"#xdebug","children":[]},{"level":2,"title":"Reverse-Proxy (Nginx)","slug":"reverse-proxy-nginx","link":"#reverse-proxy-nginx","children":[]}],"relativePath":"posts/2023/laravel-docker/index.md"}'),r={name:"posts/2023/laravel-docker/index.md"},p=s(`<h1 id="laravel-development-on-docker" tabindex="-1">Laravel Development on Docker <a class="header-anchor" href="#laravel-development-on-docker" aria-hidden="true">#</a></h1><h2 id="setting-up-docker" tabindex="-1">Setting Up Docker <a class="header-anchor" href="#setting-up-docker" aria-hidden="true">#</a></h2><ul><li>Install DockerDesktop</li><li>Install <a href="https://learn.microsoft.com/en-us/windows/wsl/install" target="_blank" rel="noreferrer">WSL2</a> (Windows only) <ul><li>Install WSL2-Ubuntu</li><li>Docker -&gt; Setting -&gt; Resources -&gt; WSL Integration -&gt; set &quot;Ubuntu&quot; on</li><li>Disable Window&#39;s Firewall-Apps</li></ul></li></ul><h2 id="start-up-a-docker-compose" tabindex="-1">Start Up A Docker-Compose <a class="header-anchor" href="#start-up-a-docker-compose" aria-hidden="true">#</a></h2><ul><li>Intall Laravel under WSL2 (type <code>wsl</code> to enter):</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://laravel.build/example-app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bash</span></span>
<span class="line"></span></code></pre></div><ul><li>Start up a docker-compose via Laravel-Sail (under WSL2):</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">example-app</span></span>
<span class="line"><span style="color:#82AAFF;">.</span><span style="color:#FFCB6B;">/vendor/bin/sail</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span></span>
<span class="line"></span></code></pre></div><h2 id="xdebug" tabindex="-1">Xdebug <a class="header-anchor" href="#xdebug" aria-hidden="true">#</a></h2><ul><li>Set the appropriate mode(s) before starting Sail:</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">SAIL_XDEBUG_MODE=develop,debug</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li>Config PhpStorm <ul><li>Set &quot;Start Listening for PHP Debug Connection&quot; on.</li><li>Set &quot;Break at first line in PHP Script&quot; on.</li></ul></li><li>Start Sail again, refresh the page <code>http://localhost</code>.</li><li>A debug request should be caught in PhpStorm now. Great, just map current project&#39;s path to the server path (should be <code>/var/www/html</code> by default).</li></ul><h2 id="reverse-proxy-nginx" tabindex="-1">Reverse-Proxy (Nginx) <a class="header-anchor" href="#reverse-proxy-nginx" aria-hidden="true">#</a></h2><ul><li>Install <a href="https://nginxproxymanager.com/guide/#project-goal" target="_blank" rel="noreferrer">Nginx-Proxy-Manager</a></li><li>Add a DNS record to the <code>hosts</code> file:</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">127.0.0.1 proxy.docker.io</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li>Access <a href="http://127.0.0.1:81" target="_blank" rel="noreferrer">http://127.0.0.1:81</a>, set up a proxy: <ul><li><a href="https://proxy.docker.io" target="_blank" rel="noreferrer">proxy.docker.io</a> -&gt; <a href="http://host.docker.internal:81" target="_blank" rel="noreferrer">http://host.docker.internal:81</a></li></ul></li></ul>`,16);function i(c,d,u,h,g,m){const e=o("Comment");return n(),t("div",null,[p,l(e)])}const x=a(r,[["render",i]]);export{b as __pageData,x as default};
