import{_ as a,C as n,o as i,c as r,k as e,a as s,t as c,H as d,Q as h}from"./chunks/framework.80d33cfa.js";const l="/assets/2FA.9976186e.jpg",A=JSON.parse('{"title":"Two-Factor Authentication Solution","description":"","frontmatter":{"title":"Two-Factor Authentication Solution","date":"2023-11-24T00:00:00.000Z","author":"Eazyc","tags":["programming"]},"headers":[],"relativePath":"posts/2023/two-factor-authentication-solution/index.md","filePath":"posts/2023/two-factor-authentication-solution/index.md"}'),u={name:"posts/2023/two-factor-authentication-solution/index.md"},p={id:"frontmatter-title",tabindex:"-1"},f=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),m=h('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><blockquote><p><a href="https://en.wikipedia.org/wiki/Help:Two-factor_authentication" target="_blank" rel="noreferrer">Two-factor authentication (2FA)</a> is a method of adding additional security to your account. The first &quot;factor&quot; is your usual password that is standard for any account. The second &quot;factor&quot; is a verification code retrieved from an app on a mobile device or computer. 2FA is conceptually similar to a security token device that banks in some countries require for online banking. Other names for 2FA systems include OTP (one-time password) and TOTP (Time-based One-time Password algorithm).</p></blockquote><p>2FA works in a similar way for your online accounts. When you sign in with your username and password, you also need to provide a second factor, such as a code sent to your phone, a push notification on your device, or a physical security key that you plug in. This makes it harder for hackers to access your accounts, even if they know your password.</p><p>To understand how 2FA works, let&#39;s look at an example of a web application that uses 2FA. The web application has two parts: the frontend and the backend. The frontend is what you see and interact with on your browser, such as the login page and the dashboard. The backend is what runs on the server, such as the database and the logic. The frontend and the backend communicate with each other through HTTP requests and responses.</p><h2 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h2><p>I&#39;m going to implement a 2FA (TOTP) system in my project. For some reason, I&#39;ll make it a two-step login (one-step is also no problem). I&#39;ll create an API for each of these two steps:</p><ul><li>Pre-Login</li><li>2FA</li></ul><p><img src="'+l+'" alt="2FA"></p><h3 id="step-1-pre-login" tabindex="-1">Step-1: Pre-Login <a class="header-anchor" href="#step-1-pre-login" aria-label="Permalink to &quot;Step-1: Pre-Login&quot;">​</a></h3><p>This step is the account-password login. However, as you can see, this API returns a <code>QRCode_URL</code> only (if it is the first time to log in) instead of a <code>token</code>.</p><h3 id="step-2-2fa" tabindex="-1">Step-2: 2FA <a class="header-anchor" href="#step-2-2fa" aria-label="Permalink to &quot;Step-2: 2FA&quot;">​</a></h3><p>After the user passes the account password authentication, it will immediately jump to the 2FA page and prompt the user to enter the 2FA code.</p><p>There are two scenarios for the frontend at this step:</p><ul><li>If it is the first time for the user to log in, the page will convert the <code>QRCode_URL</code> with the <strong>secret-key</strong> returned by the server into a <strong>QRCode</strong> and display it, so that the user can scan it (via a 2FA mobile App like Google-Authenticator or Microsoft-Authenticator) and record the <strong>secret-key</strong> to view the <code>one_time_password (OTP)</code>.</li><li>If it&#39;s not, the page will only display the <code>OTP</code> input box, and then the user needs to find the <strong>secret-key</strong> in the App to view the <code>OTP</code>.</li></ul><p>If the <code>OTP</code> is verified, the backend will mark the account as <strong>logged-in</strong>, generate a <code>token</code> and return it to the frontend. After that, the frontend and backend can interact with each other using this <code>token</code>.</p><hr>',16);function g(t,w,_,k,y,T){const o=n("Comment");return i(),r("div",null,[e("h1",p,[s(c(t.$frontmatter.title)+" ",1),f]),m,d(o)])}const P=a(u,[["render",g]]);export{A as __pageData,P as default};
